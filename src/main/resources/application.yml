server:
  port: 8082

spring:
  application:
    name: mini-carrot-product-service
  
  profiles:
    active: local
  
  datasource:
    url: ${DB_URL:jdbc:mysql://198.18.1.179:3306/minicarrot?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul}
    username: ${DB_USERNAME:minicarrot}
    password: ${DB_PASSWORD:MiniCarrot2024}
    driver-class-name: com.mysql.cj.jdbc.Driver
    
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 30000
      idle-timeout: 300000
      max-lifetime: 1800000
      pool-name: ProductServiceCP
  
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:update}
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: false
    open-in-view: false

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  
  web:
    resources:
      static-locations: classpath:/static/
      add-mappings: true
  
  http:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
    
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false
    time-zone: Asia/Seoul
    date-format: yyyy-MM-dd HH:mm:ss

rabbitmq:
  host: ${RABBITMQ_HOST:localhost}
  port: ${RABBITMQ_PORT:5672}
  username: ${RABBITMQ_USERNAME:guest}
  password: ${RABBITMQ_PASSWORD:guest}
  virtual-host: ${RABBITMQ_VHOST:/}
  connection-timeout: 30000
  listener:
    simple:
      acknowledge-mode: auto
      retry:
        enabled: true
        max-attempts: 3
        initial-interval: 1000
      prefetch: 1
      concurrency: 1
      max-concurrency: 1

jwt:
  secret: ${JWT_SECRET:minicarrotusersecretkeyforjwttoken123456789012345678901234567890}
  expiration: 86400000

user-service:
  url: ${USER_SERVICE_URL:http://user-service.tuk-trainee12.svc.cluster.local:8081}

logging:
  level:
    com.minicarrot.product: ${LOG_LEVEL:INFO}
    org.springframework.web: ${LOG_LEVEL:INFO}
    org.springframework.amqp: ${LOG_LEVEL:INFO}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_LOG_LEVEL:WARN}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
